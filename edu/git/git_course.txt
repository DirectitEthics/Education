 --- Git Course Notes | w3schools.com edu ---
 
 
 --- Commands ---
 
   - git --version
   - git config --global
   - git config --<option> user.name | user.email
   - git init 
   - git add --all || -A (adds all files in current directory to the staging environment) # --all is an optional usage, but likely best case.
   - git commit -m "Message for the commit, which should always be included."
   
   - git commit -a -m "the -a variable will automatically stage every changed, already tracked file.
   - git log (view history of commits for a repository)
   
   - git commit -help
   - git help --all
   
   git {

      add
      archive
      branch
      bundle
      citool
      clean
      clone
      commit
      describe
      diff
      fetch
      format-patch
      gc
      gitk
      grep
      gui
      init
      log
      maintenance
      merge
      mv
      notes
      pull
      push
      reset
      restore
      rm
      show
      stash
      switch
      tag
      worktree
      
      config               Get and set repository or global options
      fast-export          Git data exporter
      fast-import          Backend for fast Git data importers
      filter-branch        Rewrite branches
      mergetool            Run merge conflict resolution tools to resolve merge conflicts
      pack-refs            Pack heads and tags for efficient repository access
      prune                Prune all unreachable objects from the object database
      reflog               Manage reflog information
      remote               Manage set of tracked repositories
      repack               Pack unpacked objects in a repository
      replace              Create, list, delete refs to replace objects
	
      Ancillary Commands / Interrogators
   annotate             Annotate file lines with commit information
   blame                Show what revision and author last modified each line of a file
   bugreport            Collect information for user to file a bug report
   count-objects        Count unpacked number of objects and their disk consumption
   difftool             Show changes using common diff tools
   fsck                 Verifies the connectivity and validity of the objects in the database
   gitweb               Git web interface (web frontend to Git repositories)
   help                 Display help information about Git
   instaweb             Instantly browse your working repository in gitweb
   merge-tree           Show three-way merge without touching index
   rerere               Reuse recorded resolution of conflicted merges
   show-branch          Show branches and their commits
   verify-commit        Check the GPG signature of commits
   verify-tag           Check the GPG signature of tags
   whatchanged          Show logs with difference each commit introduces

Interacting with Others
   archimport           Import a GNU Arch repository into Git
   cvsexportcommit      Export a single commit to a CVS checkout
   cvsimport            Salvage your data out of another SCM people love to hate
   cvsserver            A CVS server emulator for Git
   imap-send            Send a collection of patches from stdin to an IMAP folder
   p4                   Import from and submit to Perforce repositories
   quiltimport          Applies a quilt patchset onto the current branch
   request-pull         Generates a summary of pending changes
   send-email           Send a collection of patches as emails
   svn                  Bidirectional operation between a Subversion repository and Git

Low-level Commands / Manipulators
   apply                Apply a patch to files and/or to the index
   checkout-index       Copy files from the index to the working tree
   commit-graph         Write and verify Git commit-graph files
   commit-tree          Create a new commit object
   hash-object          Compute object ID and optionally creates a blob from a file
   index-pack           Build pack index file for an existing packed archive
   merge-file           Run a three-way file merge
   merge-index          Run a merge for files needing merging
   mktag                Creates a tag object
   mktree               Build a tree-object from ls-tree formatted text
   multi-pack-index     Write and verify multi-pack-indexes
   pack-objects         Create a packed archive of objects
   prune-packed         Remove extra objects that are already in pack files
   read-tree            Reads tree information into the index
   symbolic-ref         Read, modify and delete symbolic refs
   unpack-objects       Unpack objects from a packed archive
   update-index         Register file contents in the working tree to the index
   update-ref           Update the object name stored in a ref safely
   write-tree           Create a tree object from the current index

Low-level Commands / Interrogators
   cat-file             Provide content or type and size information for repository objects
   cherry               Find commits yet to be applied to upstream
   diff-files           Compares files in the working tree and the index
   diff-index           Compare a tree to the working tree or index
   diff-tree            Compares the content and mode of blobs found via two tree objects
   for-each-ref         Output information on each ref
   for-each-repo        Run a Git command on a list of repositories
   get-tar-commit-id    Extract commit ID from an archive created using git-archive
   ls-files             Show information about files in the index and the working tree
   ls-remote            List references in a remote repository
   ls-tree              List the contents of a tree object
   merge-base           Find as good common ancestors as possible for a merge
   name-rev             Find symbolic names for given revs
   pack-redundant       Find redundant pack files
   rev-list             Lists commit objects in reverse chronological order
   rev-parse            Pick out and massage parameters
   show-index           Show packed archive index
   show-ref             List references in a local repository
   unpack-file          Creates a temporary file with a blob's contents
   var                  Show a Git logical variable
   verify-pack          Validate packed Git archive files

Low-level Commands / Syncing Repositories
   daemon               A really simple server for Git repositories
   fetch-pack           Receive missing objects from another repository
   http-backend         Server side implementation of Git over HTTP
   send-pack            Push objects over Git protocol to another repository
   update-server-info   Update auxiliary info file to help dumb servers

Low-level Commands / Internal Helpers
   check-attr           Display gitattributes information
   check-ignore         Debug gitignore / exclude files
   check-mailmap        Show canonical names and email addresses of contacts
   check-ref-format     Ensures that a reference name is well formed
   column               Display data in columns
   credential           Retrieve and store user credentials
   credential-cache     Helper to temporarily store passwords in memory
   credential-store     Helper to store credentials on disk
   fmt-merge-msg        Produce a merge commit message
   interpret-trailers   Add or parse structured information in commit messages
   mailinfo             Extracts patch and authorship from a single e-mail message
   mailsplit            Simple UNIX mbox splitter program
   merge-one-file       The standard helper program to use with git-merge-index
   patch-id             Compute unique ID for a patch
   sh-i18n              Git's i18n setup code for shell scripts
   sh-setup             Common Git shell script setup code
   stripspace           Remove unnecessary whitespace

External commands
   askyesno
   credential-helper-selector
   flow
   lfs
}
 
   -q , quiet
   -v , verbose
   -e , force edit of commit
   -c, --reedit-message
   -C, --reuse-message
   -S , --gpg-sign[=] (gpg sign commit)
   --branch
   --ammend
   --pathspec-from-file
   --pathspec-file-nul
 
 
 --- Explanation ---
 
 - Navigate in the Terminal to the Directory (using cd) to go to the location which you want a git repo to start in
 
 - Use command
   git init
   
   Creating A Local Git Repo 
   - Use a text / code editor and save in the folder / project
   - ls  | command to check files if needed.
   - git status (Checks to see if/what is part of our repo.)
   - git status --short (optional, shows changes in more compact style)
 
 
 
 --- Notes ---
 
   Git is a popular version control system. Created by Linus Torvalds in 2005. Has been maintained by Junio Hamano
   
   Used for: - Tracking code changes, who made changes,  & - Coding collaboration
   
   What does Git do?
   
    - Manage projects with Repositories
    - clone a project to work on a local copy
    - control and track changes allow for work on different parts and versions of a project
    - pull the latest version of the project to a local copy
    - push local updates to the main project
    
    
    Files in your Git repository folder can be in one of 2 states:
    
      - Tracked | files that Git knows about and are added to the repository
      - Untracked | files that are in your working directory, but not added to the repository.
      
      When you first add files to an empty repository, they are all untracked. To get Git to track them, you need to stage them, or add them to the staging environment.
